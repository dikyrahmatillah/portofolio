"use client";
import { useEffect, useRef } from "react";

interface Star {
  x: number;
  y: number;
  size: number;
  opacity: number;
  twinkleOffset: number;
  twinkleSpeed: number;
}

interface ShootingStar {
  x: number;
  y: number;
  endX: number;
  endY: number;
  progress: number;
  speed: number;
  life: number;
  maxLife: number;
}

export default function CanvasGalaxyBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationFrameRef = useRef<number>(0);
  const starsRef = useRef<Star[]>([]);
  const shootingStarsRef = useRef<ShootingStar[]>([]);
  const timeRef = useRef<number>(0);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // Set canvas size
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      initStars();
    };
    window.addEventListener("resize", resizeCanvas);

    // Initialize stars (static positions)
    function initStars() {
      const stars: Star[] = [];
      const starLayers = [
        { count: 120, sizeRange: [0.5, 1], opacity: [0.3, 0.6] },
        { count: 60, sizeRange: [1, 2], opacity: [0.6, 0.8] },
        { count: 30, sizeRange: [2, 3], opacity: [0.8, 1.0] },
      ];
      if (!canvas) return;
      for (const layer of starLayers) {
        for (let i = 0; i < layer.count; i++) {
          stars.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            size:
              Math.random() * (layer.sizeRange[1] - layer.sizeRange[0]) +
              layer.sizeRange[0],
            opacity:
              Math.random() * (layer.opacity[1] - layer.opacity[0]) +
              layer.opacity[0],
            twinkleOffset: Math.random() * Math.PI * 2,
            twinkleSpeed: Math.random() * 0.02 + 0.01,
          });
        }
      }
      starsRef.current = stars;
    }

    // Create shooting star
    function createShootingStar() {
      if (!canvas) return;
      if (Math.random() < 0.99) return; // 1% chance per frame
      const startX = Math.random() * canvas.width;
      const startY = -10;
      const endX = startX + (Math.random() * 400 - 200);
      const endY = canvas.height + 10;
      shootingStarsRef.current.push({
        x: startX,
        y: startY,
        endX,
        endY,
        progress: 0,
        speed: Math.random() * 0.02 + 0.01,
        life: 0,
        maxLife: Math.random() * 60 + 30,
      });
    }

    // Draw star (twinkle only)
    function drawStar(star: Star, t: number) {
      if (!ctx) return;
      const twinkle = Math.sin(t * star.twinkleSpeed + star.twinkleOffset);
      const currentOpacity = star.opacity * (0.7 + 0.3 * twinkle);
      ctx.save();
      ctx.globalAlpha = currentOpacity;
      ctx.fillStyle = "white";
      ctx.beginPath();
      ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();
    }

    // Draw shooting star
    function drawShootingStar(shootingStar: ShootingStar) {
      if (!ctx) return;
      const alpha = 1 - shootingStar.life / shootingStar.maxLife;
      ctx.save();
      ctx.globalAlpha = alpha;
      ctx.fillStyle = "white";
      ctx.shadowBlur = 10;
      ctx.shadowColor = "white";
      ctx.beginPath();
      ctx.arc(shootingStar.x, shootingStar.y, 2, 0, Math.PI * 2);
      ctx.fill();

      // Tail
      const tailX = shootingStar.x - (shootingStar.endX - shootingStar.x) * 0.1;
      const tailY = shootingStar.y - (shootingStar.endY - shootingStar.y) * 0.1;
      const gradient = ctx.createLinearGradient(
        shootingStar.x,
        shootingStar.y,
        tailX,
        tailY
      );
      gradient.addColorStop(0, `rgba(255,255,255,${alpha})`);
      gradient.addColorStop(1, "transparent");
      ctx.strokeStyle = gradient;
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.moveTo(shootingStar.x, shootingStar.y);
      ctx.lineTo(tailX, tailY);
      ctx.stroke();
      ctx.restore();
    }

    // Animation loop
    function animate() {
      if (!ctx || !canvas) return;
      timeRef.current += 1;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw static stars (twinkle only)
      for (const star of starsRef.current) {
        drawStar(star, timeRef.current);
      }

      // Create new shooting stars
      createShootingStar();

      // Update and draw shooting stars
      shootingStarsRef.current = shootingStarsRef.current.filter(
        (shootingStar) => {
          shootingStar.progress += shootingStar.speed;
          shootingStar.life += 1;
          shootingStar.x +=
            (shootingStar.endX - shootingStar.x) * shootingStar.progress * 0.1;
          shootingStar.y +=
            (shootingStar.endY - shootingStar.y) * shootingStar.progress * 0.1;
          if (shootingStar.life < shootingStar.maxLife) {
            drawShootingStar(shootingStar);
            return true;
          }
          return false;
        }
      );

      animationFrameRef.current = requestAnimationFrame(animate);
    }

    // Init and start
    resizeCanvas();
    animate();

    return () => {
      window.removeEventListener("resize", resizeCanvas);
      if (animationFrameRef.current)
        cancelAnimationFrame(animationFrameRef.current);
    };
  }, []);

  return (
    <div className="fixed inset-0 w-full h-full overflow-hidden pointer-events-none z-[-1]">
      <canvas ref={canvasRef} className="absolute inset-0 w-full h-full" />
      <div
        className="absolute inset-0 w-full h-full"
        style={{
          background: `
            radial-gradient(ellipse at center top, #23272f 0%, transparent 50%),
            radial-gradient(ellipse at center bottom, #181a1b 0%, transparent 50%),
            radial-gradient(ellipse at center, #44474a 0%, transparent 60%),
            linear-gradient(to bottom, #000000 0%, #23272f 30%, #23272f 60%, #181a1b 100%)
          `,
          zIndex: -1,
        }}
      />
    </div>
  );
}
